{% extends "python.j2" %}
{% block pylint %}
# pylint: disable=line-too-long
# pylint: disable=too-many-lines
{% endblock %}

{% block imports %}
from azure.cli.core.aaz import *
{% endblock %}

{% block code %}
{{ "" }}
{%- if leaf.register_info is not none %}
@register_command(
    "{{ leaf.name }}",
    {%- if leaf.register_info.stage|is_preview %}
    is_preview=True,
    {%- endif %}
    {%- if leaf.register_info.stage|is_experimental %}
    is_experimental=True,
    {%- endif %}
)
{%- endif %}
class {{ leaf.cls_name }}(AAZCommand):
    """{{ leaf.help.short }}
    {%- if leaf.help.long is not none and leaf.help.long|length %}

    {{ leaf.help.long.split('\n')|join('\n    ') }}
    {%- endif %}
    {%- if leaf.help.examples is not none and leaf.help.examples|length %}
    {%- for example in leaf.help.examples %}

    :example: {{ example.name }}
        {%- for command in example.commands %}
        az {{ command }}
        {%- endfor %}
    {%- endfor %}
    {%- endif %}
    """
    {%- if leaf.support_no_wait %}
    {{ "" }}
    AZ_SUPPORT_NO_WAIT = True
    {%- endif %}

    def _handler(self, command_args):
        super()._handler(command_args)
        {%- if leaf.lro_counts > 0 %}
        return self.build_lro_poller(self._execute_operations(), result_callback={% if leaf.has_outputs() %}self._output{% else %}None{% endif %})
        {%- else %}
        self._execute_operations()
        return {% if leaf.has_outputs() %}self._output(){% else %}None{% endif %}
        {%- endif %}

    {%- if leaf.has_arguments() %}
    {{ "" }}
    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        pass
    {%- endif %}

    def _execute_operations(self):
        {%- for var, name, condition in leaf.conditions %}
        {{ name }} = {{ leaf.render_condition(condition) }}
        {%- endfor %}
        {%- for op_cls_name, is_long_running, operation in leaf.operations %}

        {%- if operation.when is not none and operation.when|length %}
        if {{ leaf.render_operation_when(operation) }}:
        {{ "    " }}
        {%- else %}
        {{ "" }}
        {%- endif %}
        {%- if is_long_running %}yield {% endif %}self.{{ op_cls_name }}(ctx=self.ctx)()
        {%- endfor %}
    {%- if leaf.has_outputs() %}
    {{ "" }}
    def _output(self, *args, **kwargs):
        pass
    {%- endif %}
    {%- for op_cls_name, is_long_running, operation in leaf.http_operations %}

    class {{ op_cls_name }}(AAZHttpOperation):
        CLIENT_TYPE = "{{ leaf.client_type }}"
        ERROR_FORMAT = "{{ leaf.get_error_format(operation) }}"


    {%- endfor %}
    {%- for op_cls_name, operation in leaf.instance_update_operations %}

    {%- endfor %}

__all__ = ["{{ leaf.cls_name }}"]
{% endblock %}
