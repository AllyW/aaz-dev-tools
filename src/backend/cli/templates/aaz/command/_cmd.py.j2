{% extends "python.j2" %}
{% block pylint %}
# pylint: disable=line-too-long
# pylint: disable=too-many-lines
{% endblock %}

{% block imports %}
from azure.cli.core.aaz import *
{% endblock %}

{% block code %}
{{ "" }}
{%- if leaf.register_info is not none %}
@register_command(
    "{{ leaf.name }}",
    {%- if leaf.register_info.stage|is_preview %}
    is_preview=True,
    {%- endif %}
    {%- if leaf.register_info.stage|is_experimental %}
    is_experimental=True,
    {%- endif %}
)
{%- endif %}
class {{ leaf.cls_name }}(AAZCommand):
    """{{ leaf.help.short }}
    {%- if leaf.help.long is not none and leaf.help.long|length %}

    {{ leaf.help.long.split('\n')|join('\n    ') }}
    {%- endif %}
    {%- if leaf.help.examples is not none and leaf.help.examples|length %}
    {%- for example in leaf.help.examples %}

    :example: {{ example.name }}
        {%- for command in example.commands %}
        az {{ command }}
        {%- endfor %}
    {%- endfor %}
    {%- endif %}
    """
    {%- if leaf.support_no_wait %}

    AZ_SUPPORT_NO_WAIT = True
    {%- endif %}

    def _handler(self, command_args):
        super()._handler(command_args)
        {%- if leaf.lro_counts > 0 %}
        return self.build_lro_poller(self._execute_operations(), result_callback={% if leaf.has_outputs() %}self._output{% else %}None{% endif %})
        {%- else %}
        self._execute_operations()
        return {% if leaf.has_outputs() %}self._output(){% else %}None{% endif %}
        {%- endif %}
    {%- if leaf.arg_groups is not none and leaf.arg_groups|length %}

    {{ leaf.ARGS_SCHEMA_NAME }} = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls.{{ leaf.ARGS_SCHEMA_NAME }} is not None:
            return cls.{{ leaf.ARGS_SCHEMA_NAME }}
        cls.{{ leaf.ARGS_SCHEMA_NAME }} = super()._build_arguments_schema(*args, **kwargs)

        {%- for arg_group in leaf.arg_groups %}

        # define Arg Group "{{ arg_group.name }}"
        {%- for scope, scope_define, arguments in arg_group.iter_scopes() %}

        {{ scope }} = {{ scope_define }}
        {%- for arg_name, arg_type, arg_kwargs, cls_builder_name in arguments %}
        {{ scope }}.{{ arg_name }} = {{ arg_type }}(
            {%- for key, value in arg_kwargs.items() %}
            {{ key }}={{ value|constant_convert }},
            {%- endfor %}
        )
        {%- if cls_builder_name is not none %}
        {{ cls_builder_name }}({{ scope }})
        {%- endif %}
        {%- endfor %}
        {%- endfor %}
        return {{ leaf.ARGS_SCHEMA_NAME }}
    {%- endif %}

    {%- for arg_cls in leaf.get_arg_clses() %}

    {{ arg_cls.args_schema_name }} = None

    @classmethod
    def {{ arg_cls.builder_name }}(cls, schema):
        if cls.{{ arg_cls.args_schema_name }} is not None:
            {%- for prop_name in arg_cls.props %}
            schema.{{ prop_name }} = cls.{{ arg_cls.args_schema_name }}.{{ prop_name }}
            {%- endfor %}
            return

        cls.{{ arg_cls.args_schema_name }} = {{ arg_cls.arg_type }}(
            {%- for key, value in arg_cls.arg_kwargs.items() %}
            {{ key }}={{ value|constant_convert }},
            {%- endfor %}
        )

        {%- for scope, scope_define, arguments in arg_cls.iter_scopes() %}

        {{ scope }} = {{ scope_define }}
        {%- for arg_name, arg_type, arg_kwargs, cls_builder_name in arguments %}
        {{ scope }}.{{ arg_name }} = {{ arg_type }}(
            {%- for key, value in arg_kwargs.items() %}
            {{ key }}={{ value|constant_convert }},
            {%- endfor %}
        )
        {%- if cls_builder_name is not none %}
        {{ cls_builder_name }}({{ scope }})
        {%- endif %}
        {%- endfor %}
        {%- endfor %}
        {{- "\n" }}
        {%- for prop_name in arg_cls.props %}
        schema.{{ prop_name }} = cls.{{ arg_cls.args_schema_name }}.{{ prop_name }}
        {%- endfor %}

    {%- endfor %}

    def _execute_operations(self):
        {%- for var, name, condition in leaf.conditions %}
        {{ name }} = {{ leaf.render_condition(condition) }}
        {%- endfor %}
        {%- for operation in leaf.operations %}

        {%- if operation.when is not none and operation.when|length %}
        if {{ leaf.render_operation_when(operation.when) }}:
        {{ "    " }}
        {%- else %}
        {{ "" }}
        {%- endif %}
        {%- if operation.is_long_running %}yield {% endif %}self.{{ operation.name }}(ctx=self.ctx)()
        {%- endfor %}
    {%- if leaf.has_outputs() %}

    def _output(self, *args, **kwargs):
        # TODO:
        pass
    {%- endif %}
    {%- for operation in leaf.http_operations %}

    class {{ operation.name }}(AAZHttpOperation):
        CLIENT_TYPE = "{{ leaf.client_type }}"
        ERROR_FORMAT = "{{ operation.error_format }}"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            {%- for response in self.success_responses %}
            if session.http_response.status_code in {{ response.status_codes|constant_convert }}:
                {%- if operation.is_long_running %}
                return self.client.build_lro_polling(
                    {% if leaf.support_no_wait %}self.ctx.args.no_wait{% else %}False{% endif %},
                    session,
                    deserialization_callback=self.{{ response.callback_name }},
                    lro_options={{ operation.lro_options|constant_convert }},
                    path_format_arguments=self.url_parameters,
                )
                {%- else %}
                return self.{{ response.callback_name }}(session)
                {%- endif %}
            {%- endfor %}
            return self.on_error(session)

        @property
        def url(self):
            return self.client.format_url(
                "{{ operation.url }}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "{{ operation.method }}"
        {%- if operation.url_parameters is not none and operation.url_parameters | length %}

        @property
        def url_parameters(self):
            parameters = {
                {%- for name, data, is_constant in self.url_parameters %}
                {%- if is_constant %}
                **self.serialize_url_param("{{ name }}", {{ data|constant_convert }}),
                {%- else %}
                **self.serialize_url_param("{{ name }}", {{ data }}),
                {%- endfor %}
            }
            return parameters
        {%- endif %}
        {%- if operation.query_parameters is not none and operation.query_parameters | length %}

        @property
        def query_parameters(self):
            parameters = {
                {%- for name, data, is_constant in self.query_parameters %}
                {%- if is_constant %}
                **self.serialize_query_param("{{ name }}", {{ data|constant_convert }}),
                {%- else %}
                **self.serialize_query_param("{{ name }}", {{ data }}),
                {%- endfor %}
            }
            return parameters
        {%- endif %}
        {%- if operation.header_parameters is not none and operation.header_parameters | length %}

        @property
        def header_parameters(self):
            parameters = {
                {%- for name, data, is_constant in self.header_parameters %}
                {%- if is_constant %}
                **self.serialize_header_param("{{ name }}", {{ data|constant_convert }}),
                {%- else %}
                **self.serialize_header_param("{{ name }}", {{ data }}),
                {%- endfor %}
            }
            return parameters
        {%- endif %}
        {%- if operation.content is not none %}

        @property
        def content(self):
            # TODO:
            return None
        {%- endif %}
        {%- if operation.form_content is not none %}

        @property
        def form_content(self):
            # TODO:
            return None
        {%- endif %}
        {%- if operation.stream_content is not none %}

        @property
        def stream_content(self):
            # TODO:
            return None
        {%- endif %}
        {%- for response in self.success_responses %}

        def {{ response.callback_name }}(self, session):
            {%- if response.variant_name is not none %}
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                '{{ response.variant_name }}',
                data,
                schema_builder=self.{{ response.schema_builder }}
            )
            {%- else %}
            pass
            {%- endif %}
        {%- if response.variant_name is not none %}

        def {{ response.schema_builder }}():
            # TODO:
            pass
        {%- endif %}
        {%- endfor %}
    {%- endfor %}
    {%- for operation in leaf.json_update_operations %}

    {%- endfor %}
    {%- for operation in leaf.generic_update_operations %}

    {%- endfor %}

__all__ = ["{{ leaf.cls_name }}"]
{% endblock %}
